# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: protocol.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='protocol.proto',
  package='spacepark.vision',
  syntax='proto3',
  serialized_pb=_b('\n\x0eprotocol.proto\x12\x10spacepark.vision\"@\n\tRectangle\x12\t\n\x01x\x18\x01 \x01(\x05\x12\t\n\x01y\x18\x02 \x01(\x05\x12\r\n\x05width\x18\x03 \x01(\x05\x12\x0e\n\x06height\x18\x04 \x01(\x05\"J\n\x0bTensorShape\x12\r\n\x05\x62\x61tch\x18\x01 \x01(\x05\x12\x0e\n\x06height\x18\x02 \x01(\x05\x12\r\n\x05width\x18\x03 \x01(\x05\x12\r\n\x05\x64\x65pth\x18\x04 \x01(\x05\"H\n\nByteTensor\x12,\n\x05shape\x18\x01 \x01(\x0b\x32\x1d.spacepark.vision.TensorShape\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\"I\n\x0b\x46loatTensor\x12,\n\x05shape\x18\x01 \x01(\x0b\x32\x1d.spacepark.vision.TensorShape\x12\x0c\n\x04\x64\x61ta\x18\x02 \x03(\x02\"0\n\x10TensorNormalizer\x12\x0c\n\x04mean\x18\x01 \x01(\x02\x12\x0e\n\x06stddev\x18\x02 \x01(\x02\"\xa2\t\n\x07Request\x12\x39\n\nload_model\x18\x01 \x01(\x0b\x32#.spacepark.vision.Request.LoadModelH\x00\x12=\n\x0cunload_model\x18\x02 \x01(\x0b\x32%.spacepark.vision.Request.UnloadModelH\x00\x12\x43\n\x0fimage_inference\x18\x03 \x01(\x0b\x32(.spacepark.vision.Request.ImageInferenceH\x00\x12P\n\x16start_camera_inference\x18\x04 \x01(\x0b\x32..spacepark.vision.Request.StartCameraInferenceH\x00\x12\x45\n\x10\x63\x61mera_inference\x18\x05 \x01(\x0b\x32).spacepark.vision.Request.CameraInferenceH\x00\x12N\n\x15stop_camera_inference\x18\x06 \x01(\x0b\x32-.spacepark.vision.Request.StopCameraInferenceH\x00\x12>\n\rimu_self_test\x18\x07 \x01(\x0b\x32%.spacepark.vision.Request.ImuSelfTestH\x00\x1a\xa8\x01\n\tLoadModel\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12\x32\n\x0binput_shape\x18\x02 \x01(\x0b\x32\x1d.spacepark.vision.TensorShape\x12<\n\x10input_normalizer\x18\x03 \x01(\x0b\x32\".spacepark.vision.TensorNormalizer\x12\x15\n\rcompute_graph\x18\x04 \x01(\x0c\x1a!\n\x0bUnloadModel\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x1a\xc7\x01\n\x0eImageInference\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12,\n\x06tensor\x18\x02 \x01(\x0b\x32\x1c.spacepark.vision.ByteTensor\x12\x44\n\x06params\x18\x03 \x03(\x0b\x32\x34.spacepark.vision.Request.ImageInference.ParamsEntry\x1a-\n\x0bParamsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a\xd2\x01\n\x14StartCameraInference\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12+\n\x06window\x18\x02 \x01(\x0b\x32\x1b.spacepark.vision.Rectangle\x12J\n\x06params\x18\x03 \x03(\x0b\x32:.spacepark.vision.Request.StartCameraInference.ParamsEntry\x1a-\n\x0bParamsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a\x11\n\x0f\x43\x61meraInference\x1a\x15\n\x13StopCameraInference\x1a\r\n\x0bImuSelfTestB\t\n\x07request\"\xa9\x03\n\x0fInferenceResult\x12\x12\n\nmodel_name\x18\x01 \x01(\t\x12\r\n\x05width\x18\x02 \x01(\x05\x12\x0e\n\x06height\x18\x03 \x01(\x05\x12+\n\x06window\x18\x04 \x01(\x0b\x32\x1b.spacepark.vision.Rectangle\x12\x13\n\x0b\x64uration_ms\x18\x05 \x01(\x05\x12?\n\x07tensors\x18\x06 \x03(\x0b\x32..spacepark.vision.InferenceResult.TensorsEntry\x12\x36\n\x05\x66rame\x18\x07 \x01(\x0b\x32\'.spacepark.vision.InferenceResult.Frame\x1aM\n\x0cTensorsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12,\n\x05value\x18\x02 \x01(\x0b\x32\x1d.spacepark.vision.FloatTensor:\x02\x38\x01\x1aY\n\x05\x46rame\x12\r\n\x05index\x18\x01 \x01(\x05\x12\x14\n\x0ctimestamp_us\x18\x02 \x01(\x03\x12+\n\x05image\x18\x03 \x01(\x0b\x32\x1c.spacepark.vision.ByteTensor\"\xe4\x01\n\x08Response\x12\x30\n\x06\x65rrors\x18\x01 \x03(\x0b\x32 .spacepark.vision.Response.Error\x12\x31\n\x06result\x18\x02 \x01(\x0b\x32!.spacepark.vision.InferenceResult\x1as\n\x05\x45rror\x12\x33\n\x04type\x18\x01 \x01(\x0e\x32%.spacepark.vision.Response.Error.Type\x12\x0b\n\x03msg\x18\x02 \x01(\t\"(\n\x04Type\x12\x08\n\x04INFO\x10\x00\x12\x0b\n\x07WARNING\x10\x01\x12\t\n\x05\x45RROR\x10\x02\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)



_RESPONSE_ERROR_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='spacepark.vision.Response.Error.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='INFO', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='WARNING', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ERROR', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2183,
  serialized_end=2223,
)
_sym_db.RegisterEnumDescriptor(_RESPONSE_ERROR_TYPE)


_RECTANGLE = _descriptor.Descriptor(
  name='Rectangle',
  full_name='spacepark.vision.Rectangle',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='x', full_name='spacepark.vision.Rectangle.x', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='y', full_name='spacepark.vision.Rectangle.y', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='spacepark.vision.Rectangle.width', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='spacepark.vision.Rectangle.height', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=36,
  serialized_end=100,
)


_TENSORSHAPE = _descriptor.Descriptor(
  name='TensorShape',
  full_name='spacepark.vision.TensorShape',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='batch', full_name='spacepark.vision.TensorShape.batch', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='spacepark.vision.TensorShape.height', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='spacepark.vision.TensorShape.width', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='depth', full_name='spacepark.vision.TensorShape.depth', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=102,
  serialized_end=176,
)


_BYTETENSOR = _descriptor.Descriptor(
  name='ByteTensor',
  full_name='spacepark.vision.ByteTensor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='shape', full_name='spacepark.vision.ByteTensor.shape', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='spacepark.vision.ByteTensor.data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=178,
  serialized_end=250,
)


_FLOATTENSOR = _descriptor.Descriptor(
  name='FloatTensor',
  full_name='spacepark.vision.FloatTensor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='shape', full_name='spacepark.vision.FloatTensor.shape', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='spacepark.vision.FloatTensor.data', index=1,
      number=2, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=252,
  serialized_end=325,
)


_TENSORNORMALIZER = _descriptor.Descriptor(
  name='TensorNormalizer',
  full_name='spacepark.vision.TensorNormalizer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='mean', full_name='spacepark.vision.TensorNormalizer.mean', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stddev', full_name='spacepark.vision.TensorNormalizer.stddev', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=327,
  serialized_end=375,
)


_REQUEST_LOADMODEL = _descriptor.Descriptor(
  name='LoadModel',
  full_name='spacepark.vision.Request.LoadModel',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.LoadModel.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='input_shape', full_name='spacepark.vision.Request.LoadModel.input_shape', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='input_normalizer', full_name='spacepark.vision.Request.LoadModel.input_normalizer', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='compute_graph', full_name='spacepark.vision.Request.LoadModel.compute_graph', index=3,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=878,
  serialized_end=1046,
)

_REQUEST_UNLOADMODEL = _descriptor.Descriptor(
  name='UnloadModel',
  full_name='spacepark.vision.Request.UnloadModel',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.UnloadModel.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1048,
  serialized_end=1081,
)

_REQUEST_IMAGEINFERENCE_PARAMSENTRY = _descriptor.Descriptor(
  name='ParamsEntry',
  full_name='spacepark.vision.Request.ImageInference.ParamsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.Request.ImageInference.ParamsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.Request.ImageInference.ParamsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1238,
  serialized_end=1283,
)

_REQUEST_IMAGEINFERENCE = _descriptor.Descriptor(
  name='ImageInference',
  full_name='spacepark.vision.Request.ImageInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.ImageInference.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tensor', full_name='spacepark.vision.Request.ImageInference.tensor', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='spacepark.vision.Request.ImageInference.params', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUEST_IMAGEINFERENCE_PARAMSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1084,
  serialized_end=1283,
)

_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY = _descriptor.Descriptor(
  name='ParamsEntry',
  full_name='spacepark.vision.Request.StartCameraInference.ParamsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.Request.StartCameraInference.ParamsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.Request.StartCameraInference.ParamsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1238,
  serialized_end=1283,
)

_REQUEST_STARTCAMERAINFERENCE = _descriptor.Descriptor(
  name='StartCameraInference',
  full_name='spacepark.vision.Request.StartCameraInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.Request.StartCameraInference.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='window', full_name='spacepark.vision.Request.StartCameraInference.window', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='params', full_name='spacepark.vision.Request.StartCameraInference.params', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1286,
  serialized_end=1496,
)

_REQUEST_CAMERAINFERENCE = _descriptor.Descriptor(
  name='CameraInference',
  full_name='spacepark.vision.Request.CameraInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1498,
  serialized_end=1515,
)

_REQUEST_STOPCAMERAINFERENCE = _descriptor.Descriptor(
  name='StopCameraInference',
  full_name='spacepark.vision.Request.StopCameraInference',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1517,
  serialized_end=1538,
)

_REQUEST_IMUSELFTEST = _descriptor.Descriptor(
  name='ImuSelfTest',
  full_name='spacepark.vision.Request.ImuSelfTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1540,
  serialized_end=1553,
)

_REQUEST = _descriptor.Descriptor(
  name='Request',
  full_name='spacepark.vision.Request',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='load_model', full_name='spacepark.vision.Request.load_model', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='unload_model', full_name='spacepark.vision.Request.unload_model', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image_inference', full_name='spacepark.vision.Request.image_inference', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='start_camera_inference', full_name='spacepark.vision.Request.start_camera_inference', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='camera_inference', full_name='spacepark.vision.Request.camera_inference', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='stop_camera_inference', full_name='spacepark.vision.Request.stop_camera_inference', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='imu_self_test', full_name='spacepark.vision.Request.imu_self_test', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_REQUEST_LOADMODEL, _REQUEST_UNLOADMODEL, _REQUEST_IMAGEINFERENCE, _REQUEST_STARTCAMERAINFERENCE, _REQUEST_CAMERAINFERENCE, _REQUEST_STOPCAMERAINFERENCE, _REQUEST_IMUSELFTEST, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='request', full_name='spacepark.vision.Request.request',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=378,
  serialized_end=1564,
)


_INFERENCERESULT_TENSORSENTRY = _descriptor.Descriptor(
  name='TensorsEntry',
  full_name='spacepark.vision.InferenceResult.TensorsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='spacepark.vision.InferenceResult.TensorsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='spacepark.vision.InferenceResult.TensorsEntry.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1824,
  serialized_end=1901,
)

_INFERENCERESULT_FRAME = _descriptor.Descriptor(
  name='Frame',
  full_name='spacepark.vision.InferenceResult.Frame',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='index', full_name='spacepark.vision.InferenceResult.Frame.index', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp_us', full_name='spacepark.vision.InferenceResult.Frame.timestamp_us', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='image', full_name='spacepark.vision.InferenceResult.Frame.image', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1903,
  serialized_end=1992,
)

_INFERENCERESULT = _descriptor.Descriptor(
  name='InferenceResult',
  full_name='spacepark.vision.InferenceResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='model_name', full_name='spacepark.vision.InferenceResult.model_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='width', full_name='spacepark.vision.InferenceResult.width', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='height', full_name='spacepark.vision.InferenceResult.height', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='window', full_name='spacepark.vision.InferenceResult.window', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='duration_ms', full_name='spacepark.vision.InferenceResult.duration_ms', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tensors', full_name='spacepark.vision.InferenceResult.tensors', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='frame', full_name='spacepark.vision.InferenceResult.frame', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_INFERENCERESULT_TENSORSENTRY, _INFERENCERESULT_FRAME, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1567,
  serialized_end=1992,
)


_RESPONSE_ERROR = _descriptor.Descriptor(
  name='Error',
  full_name='spacepark.vision.Response.Error',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='type', full_name='spacepark.vision.Response.Error.type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='spacepark.vision.Response.Error.msg', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _RESPONSE_ERROR_TYPE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2108,
  serialized_end=2223,
)

_RESPONSE = _descriptor.Descriptor(
  name='Response',
  full_name='spacepark.vision.Response',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='errors', full_name='spacepark.vision.Response.errors', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='result', full_name='spacepark.vision.Response.result', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_RESPONSE_ERROR, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1995,
  serialized_end=2223,
)

_BYTETENSOR.fields_by_name['shape'].message_type = _TENSORSHAPE
_FLOATTENSOR.fields_by_name['shape'].message_type = _TENSORSHAPE
_REQUEST_LOADMODEL.fields_by_name['input_shape'].message_type = _TENSORSHAPE
_REQUEST_LOADMODEL.fields_by_name['input_normalizer'].message_type = _TENSORNORMALIZER
_REQUEST_LOADMODEL.containing_type = _REQUEST
_REQUEST_UNLOADMODEL.containing_type = _REQUEST
_REQUEST_IMAGEINFERENCE_PARAMSENTRY.containing_type = _REQUEST_IMAGEINFERENCE
_REQUEST_IMAGEINFERENCE.fields_by_name['tensor'].message_type = _BYTETENSOR
_REQUEST_IMAGEINFERENCE.fields_by_name['params'].message_type = _REQUEST_IMAGEINFERENCE_PARAMSENTRY
_REQUEST_IMAGEINFERENCE.containing_type = _REQUEST
_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY.containing_type = _REQUEST_STARTCAMERAINFERENCE
_REQUEST_STARTCAMERAINFERENCE.fields_by_name['window'].message_type = _RECTANGLE
_REQUEST_STARTCAMERAINFERENCE.fields_by_name['params'].message_type = _REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY
_REQUEST_STARTCAMERAINFERENCE.containing_type = _REQUEST
_REQUEST_CAMERAINFERENCE.containing_type = _REQUEST
_REQUEST_STOPCAMERAINFERENCE.containing_type = _REQUEST
_REQUEST_IMUSELFTEST.containing_type = _REQUEST
_REQUEST.fields_by_name['load_model'].message_type = _REQUEST_LOADMODEL
_REQUEST.fields_by_name['unload_model'].message_type = _REQUEST_UNLOADMODEL
_REQUEST.fields_by_name['image_inference'].message_type = _REQUEST_IMAGEINFERENCE
_REQUEST.fields_by_name['start_camera_inference'].message_type = _REQUEST_STARTCAMERAINFERENCE
_REQUEST.fields_by_name['camera_inference'].message_type = _REQUEST_CAMERAINFERENCE
_REQUEST.fields_by_name['stop_camera_inference'].message_type = _REQUEST_STOPCAMERAINFERENCE
_REQUEST.fields_by_name['imu_self_test'].message_type = _REQUEST_IMUSELFTEST
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['load_model'])
_REQUEST.fields_by_name['load_model'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['unload_model'])
_REQUEST.fields_by_name['unload_model'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['image_inference'])
_REQUEST.fields_by_name['image_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['start_camera_inference'])
_REQUEST.fields_by_name['start_camera_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['camera_inference'])
_REQUEST.fields_by_name['camera_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['stop_camera_inference'])
_REQUEST.fields_by_name['stop_camera_inference'].containing_oneof = _REQUEST.oneofs_by_name['request']
_REQUEST.oneofs_by_name['request'].fields.append(
  _REQUEST.fields_by_name['imu_self_test'])
_REQUEST.fields_by_name['imu_self_test'].containing_oneof = _REQUEST.oneofs_by_name['request']
_INFERENCERESULT_TENSORSENTRY.fields_by_name['value'].message_type = _FLOATTENSOR
_INFERENCERESULT_TENSORSENTRY.containing_type = _INFERENCERESULT
_INFERENCERESULT_FRAME.fields_by_name['image'].message_type = _BYTETENSOR
_INFERENCERESULT_FRAME.containing_type = _INFERENCERESULT
_INFERENCERESULT.fields_by_name['window'].message_type = _RECTANGLE
_INFERENCERESULT.fields_by_name['tensors'].message_type = _INFERENCERESULT_TENSORSENTRY
_INFERENCERESULT.fields_by_name['frame'].message_type = _INFERENCERESULT_FRAME
_RESPONSE_ERROR.fields_by_name['type'].enum_type = _RESPONSE_ERROR_TYPE
_RESPONSE_ERROR.containing_type = _RESPONSE
_RESPONSE_ERROR_TYPE.containing_type = _RESPONSE_ERROR
_RESPONSE.fields_by_name['errors'].message_type = _RESPONSE_ERROR
_RESPONSE.fields_by_name['result'].message_type = _INFERENCERESULT
DESCRIPTOR.message_types_by_name['Rectangle'] = _RECTANGLE
DESCRIPTOR.message_types_by_name['TensorShape'] = _TENSORSHAPE
DESCRIPTOR.message_types_by_name['ByteTensor'] = _BYTETENSOR
DESCRIPTOR.message_types_by_name['FloatTensor'] = _FLOATTENSOR
DESCRIPTOR.message_types_by_name['TensorNormalizer'] = _TENSORNORMALIZER
DESCRIPTOR.message_types_by_name['Request'] = _REQUEST
DESCRIPTOR.message_types_by_name['InferenceResult'] = _INFERENCERESULT
DESCRIPTOR.message_types_by_name['Response'] = _RESPONSE

Rectangle = _reflection.GeneratedProtocolMessageType('Rectangle', (_message.Message,), dict(
  DESCRIPTOR = _RECTANGLE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.Rectangle)
  ))
_sym_db.RegisterMessage(Rectangle)

TensorShape = _reflection.GeneratedProtocolMessageType('TensorShape', (_message.Message,), dict(
  DESCRIPTOR = _TENSORSHAPE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.TensorShape)
  ))
_sym_db.RegisterMessage(TensorShape)

ByteTensor = _reflection.GeneratedProtocolMessageType('ByteTensor', (_message.Message,), dict(
  DESCRIPTOR = _BYTETENSOR,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.ByteTensor)
  ))
_sym_db.RegisterMessage(ByteTensor)

FloatTensor = _reflection.GeneratedProtocolMessageType('FloatTensor', (_message.Message,), dict(
  DESCRIPTOR = _FLOATTENSOR,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.FloatTensor)
  ))
_sym_db.RegisterMessage(FloatTensor)

TensorNormalizer = _reflection.GeneratedProtocolMessageType('TensorNormalizer', (_message.Message,), dict(
  DESCRIPTOR = _TENSORNORMALIZER,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.TensorNormalizer)
  ))
_sym_db.RegisterMessage(TensorNormalizer)

Request = _reflection.GeneratedProtocolMessageType('Request', (_message.Message,), dict(

  LoadModel = _reflection.GeneratedProtocolMessageType('LoadModel', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_LOADMODEL,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.LoadModel)
    ))
  ,

  UnloadModel = _reflection.GeneratedProtocolMessageType('UnloadModel', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_UNLOADMODEL,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.UnloadModel)
    ))
  ,

  ImageInference = _reflection.GeneratedProtocolMessageType('ImageInference', (_message.Message,), dict(

    ParamsEntry = _reflection.GeneratedProtocolMessageType('ParamsEntry', (_message.Message,), dict(
      DESCRIPTOR = _REQUEST_IMAGEINFERENCE_PARAMSENTRY,
      __module__ = 'protocol_pb2'
      # @@protoc_insertion_point(class_scope:spacepark.vision.Request.ImageInference.ParamsEntry)
      ))
    ,
    DESCRIPTOR = _REQUEST_IMAGEINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.ImageInference)
    ))
  ,

  StartCameraInference = _reflection.GeneratedProtocolMessageType('StartCameraInference', (_message.Message,), dict(

    ParamsEntry = _reflection.GeneratedProtocolMessageType('ParamsEntry', (_message.Message,), dict(
      DESCRIPTOR = _REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY,
      __module__ = 'protocol_pb2'
      # @@protoc_insertion_point(class_scope:spacepark.vision.Request.StartCameraInference.ParamsEntry)
      ))
    ,
    DESCRIPTOR = _REQUEST_STARTCAMERAINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.StartCameraInference)
    ))
  ,

  CameraInference = _reflection.GeneratedProtocolMessageType('CameraInference', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_CAMERAINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.CameraInference)
    ))
  ,

  StopCameraInference = _reflection.GeneratedProtocolMessageType('StopCameraInference', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_STOPCAMERAINFERENCE,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.StopCameraInference)
    ))
  ,

  ImuSelfTest = _reflection.GeneratedProtocolMessageType('ImuSelfTest', (_message.Message,), dict(
    DESCRIPTOR = _REQUEST_IMUSELFTEST,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Request.ImuSelfTest)
    ))
  ,
  DESCRIPTOR = _REQUEST,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.Request)
  ))
_sym_db.RegisterMessage(Request)
_sym_db.RegisterMessage(Request.LoadModel)
_sym_db.RegisterMessage(Request.UnloadModel)
_sym_db.RegisterMessage(Request.ImageInference)
_sym_db.RegisterMessage(Request.ImageInference.ParamsEntry)
_sym_db.RegisterMessage(Request.StartCameraInference)
_sym_db.RegisterMessage(Request.StartCameraInference.ParamsEntry)
_sym_db.RegisterMessage(Request.CameraInference)
_sym_db.RegisterMessage(Request.StopCameraInference)
_sym_db.RegisterMessage(Request.ImuSelfTest)

InferenceResult = _reflection.GeneratedProtocolMessageType('InferenceResult', (_message.Message,), dict(

  TensorsEntry = _reflection.GeneratedProtocolMessageType('TensorsEntry', (_message.Message,), dict(
    DESCRIPTOR = _INFERENCERESULT_TENSORSENTRY,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.InferenceResult.TensorsEntry)
    ))
  ,

  Frame = _reflection.GeneratedProtocolMessageType('Frame', (_message.Message,), dict(
    DESCRIPTOR = _INFERENCERESULT_FRAME,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.InferenceResult.Frame)
    ))
  ,
  DESCRIPTOR = _INFERENCERESULT,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.InferenceResult)
  ))
_sym_db.RegisterMessage(InferenceResult)
_sym_db.RegisterMessage(InferenceResult.TensorsEntry)
_sym_db.RegisterMessage(InferenceResult.Frame)

Response = _reflection.GeneratedProtocolMessageType('Response', (_message.Message,), dict(

  Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), dict(
    DESCRIPTOR = _RESPONSE_ERROR,
    __module__ = 'protocol_pb2'
    # @@protoc_insertion_point(class_scope:spacepark.vision.Response.Error)
    ))
  ,
  DESCRIPTOR = _RESPONSE,
  __module__ = 'protocol_pb2'
  # @@protoc_insertion_point(class_scope:spacepark.vision.Response)
  ))
_sym_db.RegisterMessage(Response)
_sym_db.RegisterMessage(Response.Error)


_REQUEST_IMAGEINFERENCE_PARAMSENTRY.has_options = True
_REQUEST_IMAGEINFERENCE_PARAMSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY.has_options = True
_REQUEST_STARTCAMERAINFERENCE_PARAMSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_INFERENCERESULT_TENSORSENTRY.has_options = True
_INFERENCERESULT_TENSORSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
# @@protoc_insertion_point(module_scope)
